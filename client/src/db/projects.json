[
  {
    "_id": 10,
    "name": "Spotify Clone",
    "photo": "/images/sc/mockup.png",
    "repoName": "SpotifyClone",
    "font": "/images/sc/font.png",
    "links": {
      "repo": "https://github.com/LeCarteloo/SpotifyClone",
      "live": "https://spotifyclone.filippapiernik.pl"
    },
    "technologies": [
      {
        "name": "TypeScript",
        "icon": "typescript"
      },
      {
        "name": "Node.js",
        "icon": "node"
      },
      {
        "name": "React.js",
        "icon": "react"
      },
      {
        "name": "Styled Components",
        "icon": "styledcomponents"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      }
    ],
    "team": "1",
    "componentAPI": {
      "img": "/images/sc/components.png"
    },
    "colors": [
      "#1ed760",
      "#ffffff",
      "#2a2a2a",
      "#242424",
      "#181818",
      "#000000"
    ],
    "video": "/videos/sc.mp4",
    "content": "<section> <h2 class='showcase__title'>USER INTERFACE</h2> <img class='showcase__img' loading='lazy' src='/images/sc/home.png' /> <p> The main view contains user-created playlists (at the top of the page) and a section with playlists created by <b>Spotify</b> (data from a JSON file). Depending on the data, there may be multiple sections with multiple playlists. Each playlist can be played/paused by <i>hovering</i> over it and <i>clicking</i> a button that appears after the user hovers. After clicking on the playlist block, the user will be redirected to a page dedicated to that <i>playlist</i>. </p> <img class='showcase__img' loading='lazy' src='/images/sc/playlist.png' /> <p> In the playlist page view, the user can see more information about a <i>specific</i> playlist. The user can see who <u>created a particular playlist</u>, how many <u>likes it has</u>, the <u>number of songs</u> and the <u>duration of the entire playlist</u>. Songs can be played by <i>hovering</i> over the song row and <i>clicking</i> the button that will be shown, or by <i>double-clicking</i>. The playlist can be liked/disliked by clicking the <i>heart icon</i>. The background color changes depending on the image. To calculate the average color of an image, the custom hook <i>useImageColor</i> is used. This custom hook uses the <b>Fast-Average-Color</b> package. This calculation is performed in the <u>Playlist</u>, <u>Profile</u>, <u>Artist</u> and <u>PlaybarMobile</u> components. </p> <img class='showcase__img' loading='lazy' src='/images/sc/queue.png' /> <p> The queue view displays all the songs in the currently playing playlist. The user can play any song from the queue, and the queue will be ordered. In this project, nothing can be added to the queue, it will only show songs from the playlist. </p> <img class='showcase__img' loading='lazy' src='/images/sc/lyrics.png' /> <p> This view contains lyrics for the currently playing song, the lyrics are taken from another JSON file simulating another <i>API</i> response. In the demo, only two songs have lyrics - Forgotten and Numb by Linkin Park. </p> </section>",
    "desc": "<p>The goal of this project was to create <b>Spotify</b> web player, with all the key views, working both on mobile and desktop devices. Although this application does not use any <b>API</b>, it was designed to be able to handle them. All data fetched to the application comes from <b>JSON</b> files, which simulates the <b>API</b> response. Before writing the <i>React</i> code, ten reference images were taken, each with diffrent view. All the colors used were taken from official <b>Spotify</b> app. I tried to create this app with <i>Pixel-Perfect</i> precision, based only on reference images. There may be a few diffrences here and there, esspecially on mobile view, mainly due to the font type. <b>Spotify</b> uses a paid font, so this app uses a simillar one. One of the biggest diffrence is that <i>official</i> web app does not have seamless transition to mobile view, but instead detects what type of device user is using and renders a diffrent views and components accordingly, so for example if user is on desktop device and changes the browser width to less than 768px, the page will no longer shrink anymore and overflow-x will be shown. My version has this <i>seamless transition</i>, but the drawback is that it looks diffrent on mobile devices than the official app, the only components that my app renders conditionally depending on device type are <i>Playbar</i> and <i>Navbar</i>. A final diffrence is that the mobile version of <b>Spotify's</b> web player does not allow user to visit their library page, my implementation does not have that limitation.</p>",
    "isFeatured": true
  },
  {
    "_id": 1,
    "name": "Virtual University",
    "photo": "/images/vu/mockup.png",
    "repoName": "VirtualUniversity",
    "font": "/images/vu/font.png",
    "links": {
      "repo": "https://github.com/LeCarteloo/VirtualUniversity"
    },
    "technologies": [
      {
        "name": "JavaScript",
        "icon": "javascript"
      },
      {
        "name": "Node.js",
        "icon": "node"
      },
      {
        "name": "Express.js",
        "icon": "express"
      },
      {
        "name": "React.js",
        "icon": "react"
      },
      {
        "name": "MongoDB",
        "icon": "mongodb"
      },
      {
        "name": "SCSS",
        "icon": "scss"
      },
      {
        "name": "JWT",
        "icon": "jwt"
      }
    ],
    "tools": [
      {
        "name": "Postman",
        "icon": "postman"
      },
      {
        "name": "Git",
        "icon": "git"
      },
      {
        "name": "Nodemon",
        "icon": "nodemon"
      }
    ],
    "team": "1",
    "video": "/videos/vu.mp4",
    "note": "The project is currently on hold, it will be resumed once SpotifyClone is completed. List of missing features is at the bottom. / 29.09.2022",
    "colors": ["#339fcd", "#1164aa", "#302c3c", "#2f3142", "#1c1c2c"],
    "content": "<section> <h2 class='showcase__title'>USER INTERFACE</h2> <p> Although the application is not yet finished, there is a couple of screenshots from working app (the first one is from admin panel and the rest from the student views): </p> <img class='showcase__img' loading='lazy' src='/images/vu/courses.png' /> <img class='showcase__img' loading='lazy' src='/images/vu/calendar.png' /> <img class='showcase__img' loading='lazy' src='/images/vu/grades.png' /> <img class='showcase__img' loading='lazy' src='/images/vu/studentdata.png' /> <img class='showcase__img' loading='lazy' src='/images/vu/syllabus.png' /> </section> <section> <h2 class='showcase__title'>MISSING FEATURES</h2> <p> There is a list of <u>missing</u> features below. All features will be implemented in near future. </p> <ul> <li>Articles</li> <li>Lecturer views</li> <li>Graduation routes and views</li> <li>Admin routes for user management</li> <li>Route role validation</li> <li>Server validation for incoming data</li> <li>Full multi-language support (English and Polish)</li> <li>Full screen readers support</li> <li>Light mode</li> <li>*Notifications</li> <li>*Files upload</li> </ul> <p>*Subject to change</p> </section> ",
    "desc": "<p> <b>Virtual University</b> is an application where students can see their information about current university course. This project started as a <i>frontend</i> exercise but pretty quickly evolved into <i>full stack</i> application. Initially the app was supposed to be build with <b>React.js</b>, <b>MySQL</b> and <b>Node.js</b> but after finding out that <i>MERN</i> stack is very popular, i went with it. </p>",
    "isFeatured": true
  },
  {
    "_id": 3,
    "name": "Flow Free Web",
    "photo": "/images/ff/mockup.png",
    "repoName": "FlowFreeWeb",
    "font": "/images/ff/font.png",
    "links": {
      "repo": "https://github.com/LeCarteloo/FlowFreeWeb",
      "live": "https://flow-free-multiplayer.herokuapp.com/"
    },
    "technologies": [
      {
        "name": "JavaScript",
        "icon": "javascript"
      },
      {
        "name": "Node.js",
        "icon": "node"
      },
      {
        "name": "Express.js",
        "icon": "express"
      },
      {
        "name": "Lodash.js",
        "icon": "lodash"
      },
      {
        "name": "Socket.io",
        "icon": "socketio"
      },
      {
        "name": "CSS",
        "icon": "css"
      },
      {
        "name": "Jest.js",
        "icon": "jest"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      },
      {
        "name": "Nodemon",
        "icon": "nodemon"
      }
    ],
    "team": "1",
    "video": "/videos/ff.mp4",
    "note": "Full project description will be added in near future. Live version is hosted on Heroku so it takes a couple of seconds to start the app. / 21.10.2022",
    "colors": ["#4caf50", "#302c3c", "#121212"],
    "content": "<section> <h2 class='showcase__title'>USER INTERFACE</h2> <img class='showcase__img' loading='lazy' src='/images/ff/start.png' /> <p> Start view contains three buttons and two text inputs. Before creating or joining lobby user must first provide his username. In case of not providing username, appropriate alert will be shown. User can join to lobby by providing <i>game code</i> or by <i>lobby list</i>. </p> <img class='showcase__img' loading='lazy' src='/images/ff/lobby-list.png' /> <p> This view contains information about all lobbies. If lobby settings are changed they will be updated with <i>refresh button</i>. There is three statuses of room: green - free to join, yellow - currently playing, red - game finished. </p> <img class='showcase__img' loading='lazy' src='/images/ff/lobby.png' /> <p> On the left, there is a <i>game code</i> and currently connected <i>players</i>. On the right, there is a list of lobby settings which lobby owner can change and the <i>start button</i>. </p> <img class='showcase__img' loading='lazy' src='/images/ff/game.png' /> <p> One of the elements visible in the game view is <i>timer</i>, next one is <i>points counter</i>. Every pipe on map and every color connected awards an user number of points. The <i>game map</i> is the biggest part of the game view. User can draw pipes with mouse (with mouse events) or with a finger on mobile (with touch events). <i>Next map</i> button changes map to the next one (without the possibility to return). When user clicks the <i>hint button</i>, AI solver runs with map and user input. When map can be completed in 100%, solver shows where to draw the pipe otherwise shows appropriate alert. </p> <img class='showcase__img' loading='lazy' src='/images/ff/finish.png' /> <p> When time is up, end view is shown. End view contains all maps of both users with all the moves they made, also the number of points are displayed. </p> </section> <section> <h2 class='showcase__title'>A* ALGORITHM</h2> <p> <b>A*</b> is an heurisitc algorithm which means it has special function (in games that doesn't allow diagonal movement it is manhattan distance) <i></i>to help locate the correct way. Basic <b>A* Algorithm</b> usually search for the shortest way between two given points and computes two quantites for each node (state): </p> <ul> <li> a cost to come <b>g(x)</b> that considers all of the moves made to get to this state, </li> <li> a cost to go estimate <b>h(x)</b> that estimates the remaining distance to a goal state. </li> </ul> <p> In <b>Flow Free</b> rarely maps can be solved by following shortest way, thats way <b>A*</b> is heavly modified to be able to solve the maps. Each node in modified version contains: </p> <ul> <li> a cost to come <b>g(x)</b> that sums up move costs, move can cost one unit (normal move) or zero (forced moves), </li> <li> a cost to go <b>h(x)</b> shortest distance to a end point (manhattan distance), </li> <li> a current <b>map</b> state - which contains number of free tiles, whole map, array of finished points and positions of every current point (at initialization start points). </li> </ul> <p> All the moves are placed in order with the best move on top, moves are stacked by heuristic function cost (<b>f(x) = g(x) + h(x)</b>). </p> </section> <section> <h2 class='showcase__title'>FORCED MOVES</h2> <p> Every forced move has priority which means if one of the current pipes has a forced move it will be made as fast as possible. Forced move costs zero, so they are the best move choice. Algorithm considers two types: </p> <ul> <li>if a pipe has only one empty neighbour field</li> <li> if an empty field is adjacent to a single pipe's current position and it has only one empty neigbhour field </li> </ul> </section> <section> <h2 class='showcase__title'>MOVE CHECKS</h2> <p> Move can potentially block whole map from 100% completion, that's why before every move few check are performed to prevent blocking the map or to find potential wrong move faster: <ul> <li> if move blocked color or sector </li> <li>if move blocked others from completion</li> <li>if move missed field that is impossible to fill later</li> </ul> </p> </section> <section> <h2 class='showcase__title'>MAP GENERATION</h2> <p> Map generation is rather simple <i>(in version v1.0)</i>, algorithm randomly places given amount of points on map and then runs the <b>AI solver</b>, if map can be solved within a reasonable time frame - it is added to lobby map list. Which means sometimes algorithm must do a lot of iterations and it takes some time. Puzzle size can range from 2x2 to 16x16 (currently the user should stick to maps from range <b>2x2 - 6x6</b> because map generation is very simple). </p> </section> <section> <h2 class='showcase__title'>FUTURE</h2> <p> Current version of the project <i>(v1.0)</i> contains few unoptimzed features like: <u>map generation</u>, <u>CCL algoritm</u>, <u>saving user moves method</u>. Next version will cover those things and also will contain new <u>glassmorphism design</u>. List below: </p> <ul> <li>New map generation algorithm</li> <li>CCL algorithm refractor</li> <li>User move saving method refractor</li> <li>WebSocket code refractor</li> <li>New glassmorphism design</li> <li>Unit test fix</li> <li>MySQL database</li> <li>PHP API</li> <li>Multi-language support (English and Polish)</li> <li>*More game modes</li> </ul> <p>*Subject to change</p> </section> <section> <h2 class='showcase__title'>SOURCES</h2> <ul> <li> <a href='https://towardsdatascience.com/deep-learning-vs-puzzle-games-e996feb76162' >https://towardsdatascience.com/deep-learning-vs-puzzle-games-e996feb76162</a > </li> <li> <a href='https://stackabuse.com/dijkstras-algorithm-vs-a-algorithm/' >https://stackabuse.com/dijkstras-algorithm-vs-a-algorithm/</a > </li> <li> <a href='https://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html' >https://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html</a > </li> <li> <a href='https://ichi.pro/pl/rozne-rodzaje-odleglosci-uzywane-w-uczeniu-maszynowym-259968051799106' >https://ichi.pro/pl/rozne-rodzaje-odleglosci-uzywane-w-uczeniu-maszynowym-259968051799106</a > </li> <li> <a href='https://mzucker.github.io/2016/08/28/flow-solver.htm' >https://mzucker.github.io/2016/08/28/flow-solver.htm</a > </li> <li> <a href='https://en.wikipedia.org/wiki/Connected-component_labeling' >https://en.wikipedia.org/wiki/Connected-component_labeling</a > </li> <li> <a href='https://www.nafrontendzie.pl/wielowatkowy-javascript-web-worker' >https://www.nafrontendzie.pl/wielowatkowy-javascript-web-worker</a > </li> <li> <a href='https://nodejs.org/api/worker_threads.html' >https://nodejs.org/api/worker_threads.html</a > </li> </ul> </section>",
    "desc": "<p>The game is about connecting colorful points together on a grid. The perfect solution is when all empty squares are filled. In its orginal state the game is about solving maps that are getting harder with every map completed (maps are added to the game in updates). This project introduces <b>randomly generated maps</b> (with user input), <b>multiplayer experience</b> and <b>AI</b> which gives user a hint how to solve the map (AI is based on A* search algorithm). Every pipe on map and every color connected awards an user number of points. Users join or create lobby where he provides settings for the game - number of hints, time limit, map size, number of colors, number of maps and also if pipes in the same color can touch (in original game they can not).</p>",
    "isFeatured": true
  },
  {
    "_id": 2,
    "name": "OutBox",
    "photo": "/images/ob/mockup.png",
    "repoName": "OutBox",
    "links": {
      "repo": "https://github.com/LeCarteloo/OutBox"
    },
    "technologies": [
      {
        "name": "Java",
        "icon": "java"
      },
      {
        "name": "MySQL",
        "icon": "mysql"
      },
      {
        "name": "Hibernate",
        "icon": "hibernate"
      },
      {
        "name": "CSS",
        "icon": "css"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      }
    ],
    "team": "5",
    "time": "2M",
    "colors": ["#ffa500", "#d82020", "#302c3c", "#121212", "#ffffff"],
    "desc": "<p>The aim of this project was to create desktop application to manage transport company <b>OutBox</b>. Its task is to handle <i>customers</i>, <i>couriers</i>, <i>managers</i> and <i>administrators</i>. Users can send, track their packages and view shipment history. Couriers have the ability to see what packages they need to delivery and also they can change their status. Managers have an overview of packages from their area, can generate PDF raports and charts and also they manage couriers. The administrator is the <i>highest-ranking</i> user. He has ability to manage all users, edit properites of shipment. He can generate PDF raports from whole company.</p>",
    "content": "<section> <h2 class='showcase__title'>USER INTERFACE</h2> <img class='showcase__img' loading='lazy' src='/images/ob/track.png' /> <p> Track package view allows to user to view all active packages. The view includes two main button that allow to sort. Each 'block' with a shipment contains two buttons: The first allows you to view all the information about a package, second one displays all the statuses of selected package along with time frames. </p> <img class='showcase__img' loading='lazy' src='/images/ob/register.png' /> <p> Package registration view allows user to register parcel. At the very beginning user need to select type of package, then fill information about the recipent and at the end submit form. </p> <img class='showcase__img' loading='lazy' src='/images/ob/settings.png' /> <p> In application settings user can choose language between English or Polish and also choose theme of the application (Orange, White or Red). User can also change his personal information, change password or permanently delete account. </p> <img class='showcase__img' loading='lazy' src='/images/ob/admin.png' /> <p> As an admin, it is possible to add and edit areas where transport company will be operating. </p> <img class='showcase__img' loading='lazy' src='/images/ob/pdf.png' /> <p> This view is used to generate PDF raports about packages as manager. User can choose between pre-made data ranges or provide his own data range. User can provide name of file but it is not needed. </p> </section> <section> <h2 class='showcase__title'>DATABASE</h2> <img class='showcase__img' loading='lazy' src='/images/ob/db.png' /> </section>",
    "isFeatured": true
  },
  {
    "_id": 4,
    "name": "Invoicing Module",
    "repoName": "InvoicingModule",
    "links": {
      "repo": "https://github.com/LeCarteloo/InvoicingModule"
    },
    "technologies": [
      {
        "name": "PHP",
        "icon": "php"
      },
      {
        "name": "MySQL",
        "icon": "mysql"
      },
      {
        "name": "Ajax",
        "icon": "ajax"
      },
      {
        "name": "CSS",
        "icon": "css"
      }
    ],
    "tools": [
      {
        "name": "Postman",
        "icon": "postman"
      },
      {
        "name": "Git",
        "icon": "git"
      },
      {
        "name": "Xampp",
        "icon": "xampp"
      }
    ],
    "team": "3",
    "desc": "Web application created with PHP, HTML5, CSS and a little bit of AJAX. The project consisted in creation of an invocing module which allow to print invoices through information from the API of other modules. (Each group had to create a different module and API which later was shared with the others). The information in the database comes from the API of other modules.",
    "isFeatured": false
  },
  {
    "_id": 5,
    "name": "Bank Application",
    "repoName": "BankApplication",
    "links": {
      "repo": "https://github.com/LeCarteloo/BankApplication"
    },
    "technologies": [
      {
        "name": "PHP",
        "icon": "php"
      },
      {
        "name": "Java",
        "icon": "java"
      },
      {
        "name": "MySQL",
        "icon": "mysql"
      },
      {
        "name": "JavaScript",
        "icon": "javascript"
      },
      {
        "name": "CSS",
        "icon": "css"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      },
      {
        "name": "Xampp",
        "icon": "xampp"
      }
    ],
    "team": "5",
    "desc": "The goal of this project was to create a working system consisting of two banks (each developed with diffrent technologies) and a system between the two banks that allowed to make external transfers.",
    "isFeatured": false
  },
  {
    "_id": 6,
    "name": "Package App",
    "repoName": "PackageApp",
    "links": {
      "repo": "https://github.com/LeCarteloo/PackageApp"
    },
    "technologies": [
      {
        "name": "Java",
        "icon": "java"
      },
      {
        "name": "PLSQL",
        "icon": "sql"
      }
    ],
    "tools": [
      {
        "name": "Oracle",
        "icon": "oracle"
      }
    ],
    "team": "1",
    "desc": "The subject of the project is a application for transport company. It has been developed for both customers, employees and system administrators.",
    "isFeatured": false
  },
  {
    "_id": 7,
    "name": "Deserted Island",
    "repoName": "DesertedIsland",
    "links": {
      "repo": "https://github.com/LeCarteloo/DesertedIsland"
    },
    "technologies": [
      {
        "name": "C#",
        "icon": "csharp"
      }
    ],
    "tools": [
      {
        "name": "Unity",
        "icon": "unity"
      }
    ],
    "team": "3",
    "desc": "Survival game taking place on an island made in Low-Poly style. Player needs to gather resources, craft tools, eat and drink in order to survive. Game has dynamic day and night cycle with dynamic weather.",
    "isFeatured": false
  },
  {
    "_id": 8,
    "name": "Restaurant Web App",
    "repoName": "RestaurantWeb",
    "links": {
      "repo": "https://github.com/LeCarteloo/RestaurantWeb"
    },
    "technologies": [
      {
        "name": "JavaScript",
        "icon": "javascript"
      },
      {
        "name": "CSS",
        "icon": "css"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      }
    ],
    "team": "1",
    "desc": "Simple restaurant website with three sections and a couple of animations. Created for personal exercise. ",
    "isFeatured": false
  },
  {
    "_id": 9,
    "name": "Training Mobile App",
    "repoName": "AplikacjaTreningowa",
    "links": {
      "repo": "https://github.com/LeCarteloo/AplikacjaTreningowa"
    },
    "technologies": [
      {
        "name": "Java",
        "icon": "java"
      },
      {
        "name": "Android",
        "icon": "android"
      }
    ],
    "tools": [
      {
        "name": "Git",
        "icon": "git"
      }
    ],
    "team": "1",
    "colors": ["#4caf50", "#302c3c", "#121212"],
    "desc": "Simple android training app made in Java.",
    "isFeatured": false
  }
]
